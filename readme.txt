Jian Wang

please use "make" in my root directory to compile the java program and Run the Runfile to run the compiled class. It is the exact same way as described in project description.



My design Information: The overall design includes seven classes. They are class Interpreter, class Token, class NewScanner, class Parser, class TreeNode, class Evaluation and class Parameters. 

Class Interpreter is the main class that includes the main method in java to run the program. It read files in from scanner and return the string to the new objects NewScanner and new Parser of the other classes. 
Token class is a class that generate the token type. It includes token value and type and some other boolean attributes such as isAtom, isOpenParenthesis, isDot... Here I modify the token class and add many private boolean attributes so that I can fastly judge if the token is a function and what the type of function is. The type of token includes all types introduced by given project description and an additional error type token if it is an error token e.g. 123AVC.... Here I modify to accept negative number to do the operations which is described in the description of project 2 such as (REMAINDER -5 3) is -2. Class TreeNode is used for creating the binary tree.It contains token, left or right child and boolean isList. An empty Token (an empty root representation of two s-exp) will default to be True as well as NIL. and isLeaf (if it is leaf or inner node)
The NewScanner class is to scanner the whole string that read from the file and parse it to the tokens and it performs exactly same as project description such as GetNextToken and hasNextToken. Basically no modification on TreeNode, but added one attribute isAtom to check if it is an atom. The class Parser is the main class for parsing the tokens, build the binary tree, evaluate the expression and print the binary tree. It contains two main functions  ParseStart and ParseSexp described by project description as well as printNode and printList in Piazza. ParseStart should call the evaluation to evaluate the expression.For method isAllList I checked if the isList attributes of all inner nodes are true. I recursively treversal the binary tree and print them as printList if their isLists are all true.The class take in a NewScanner and get all the tokens. To build the tree, I use recursive method that create an empty token(both value and type) for an s-expression as an inner node as well as the root of the tree. 2 additional methods here are used for check the isList attributes of the whole evaluated tree, first clear all the islist and then reassign them in order to print the whole expression right. Class evaluation is the class to implement the algorithm written in PPT including most of the error checks.